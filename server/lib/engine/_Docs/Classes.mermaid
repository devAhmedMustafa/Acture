
%%{init: {"theme": "dark"}}%%

classDiagram

    namespace Channels {

        class Channel~T~:::abstract {
            <<abstract>>
            # data : shared_ptr~T~
            # notified : Boolean

            + Receive() shared_ptr~T~
            + Send(data: shared_ptr~T~) void
        }

        class StationChannel~StationChannelSchema~:::concrete {
            + Send(station: Station) void
            + Receive() shared_ptr~Station~
        }

    }

    Channel <|-- StationChannel
    StationChannel --> StationChannelSchema

    namespace Schemas {

        class StationChannelSchema {
            + stationType: STATION_TYPE
            + willPause : Boolean

            + StationChannelSchema(stationType: STATION_TYPE, willPause: Boolean)
        }

    }

    namespace Events {
        class Event~T~:::abstract {
            <<abstract>>

            - callback: Callback~T~[]

            + Subscribe(callback: Callback~T~) void
            + Dispatch(data: shared_ptr~T~) void
        }

        class StationCallEvent~StationChannelSchema~:::concrete {
        }
    }    

    Event <|-- StationCallEvent
    StationCallEvent --> StationChannelSchema

    namespace States {
        class EngineBaseState:::abstract {
            <<abstract>>
            + OnEnter(app: Application) void
            + OnUpdate(app: Application, delta: Number) void
        }

        class EngineEmptyState {

        }

        class EnginePausedState {
            
        }

        class EngineRewindState {

        }

        class EngineRunningState {

        }

        class EngineStationedState:::abstract {
            <<abstract>>
        }

        class EngineStationedPausedState {

        }

        class EngineStationedRunState {

        }

        class EngineTravellingState {

        }
    }

    EngineBaseState <|-- EngineEmptyState
    EngineBaseState <|-- EnginePausedState
    EngineBaseState <|-- EngineRewindState
    EngineBaseState <|-- EngineRunningState
    EngineBaseState <|-- EngineStationedState
    EngineStationedState <|-- EngineStationedPausedState
    EngineStationedState <|-- EngineStationedRunState
    EngineBaseState <|-- EngineTravellingState

    EngineStationedState --> StationChannel

    namespace Managers {

        class MediaBinder:::concrete {
            - verse: Verse
            - clipsIdx: Number[]

            + BindVerse(verse: Verse) void
            + UnbindVerse() void
            + GetVerse() Verse

            + DataToBind() Clip[]
        }

        class StationManager:::concrete {
            - prevStation: Station
            - nextStation: Station
            - history: Station[]

            + CheckTimelapse() Boolean
            + GetNextStation() Station
            + GetPrevStation() Station
            + Travel(thread: Number) void
            + ReverseTravel() void
        }

        class TimeService:::concrete {
            - metaTimer: Number

            + GetTimer() Number
            + SetTime(newTime: Number) void
            + StepTime(delta: Number) void
        }

    }

    Verse "1" --o "1" MediaBinder
    MediaBinder --> "*" Clip
    Network "1" --o "1" StationManager
    StationManager "1" --o "*" Station
    StationManager "1" --* "1" StationHistory


    namespace Stores {

        class Network:::concrete {
            - root: Station
            - idCache: Map<Number, Station>
            - counter: Number

            + constructor(root: RootStation)
            + Network(root: RootStation)
            + GetStationCount() Number
            + GetRoot() Station
            + GetStationById(id: Number) Station
            + PushStation(stationId: Number, stationToConnect: Station) void
            + RemoveStation(stationID: Number) void
        }

        class DataPool:::concrete {
            - dataUnit: Map<Number, DataUnit>
            - dataUnitCounter: Number

            + GetDataUnitCount() Number
            + GetDataUnitById(id: Number) DataUnit
            + GetDataUnitByPath(path: String) DataUnit
        }

        class StationHistory:::concrete {
            - choicesTaken: Map~Number, Number~

            + GetChoicesTaken() Map~Number, Number~
            + GetChoiceById(id: Number) Number
            + AddChoice(id: Number, choice: Number) void
            + RemoveChoice(id: Number) void
            + ClearChoices() void
        }

    }

    Station "1" --o "*" Network
    DataPool "1" --o "*" DataUnit

    namespace Types {
        class STATION_TYPE:::enumerations {
            <<enumeration>>
            + ROOT
            + MCQ
            + LEAF
        }

        class MEDIA_TYPE:::enumerations {
            <<enumeration>>
            + AUDIO
            + VIDEO
            + IMAGE
            + TEXT
        }

        class EngineState:::enumerations {
            <<enumeration>>
            + EMPTY
            + PAUSED
            + REWIND
            + RUNNING
            + STATIONED
            + STATIONED_PAUSED
            + STATIONED_RUN
            + TRAVELLING
        }
    }

    namespace Machines {

        class DEI:::abstract {
            - id: Number
            - time: Number
            - mediaType: MEDIA_TYPE
            - verse: Verse

            + GetId() Number
            + GetTime() Number
            + GetMediaType() MEDIA_TYPE

            + SaveToDataPool(path: String) void
        }

        class DEO:::abstract {
            - id: Number
            - time: Number
            - mediaType: MEDIA_TYPE
            - verse: Verse

            + GetId() Number
            + GetTime() Number
            + GetMediaType() MEDIA_TYPE
            + FetchData() void
        }


        class Station:::abstract {

            - network: StationNetwork

            - id: uint8
            - type: STATION_TYPE
            - timelapse: Number
            - lifetime: Number
            
            - parents: uint8[]
            - stationsConnected: uint8[]
            - versesConnected: Verse[]
            - pause: Boolean

            + Station(type: STATION_TYPE, timelapse: Number, lifetime: Number)
            + ~Station() void

            + GetId() Number
            + WillPause() Boolean
            + GetType() STATION_TYPE
            + GetTimelapse() Number
            + SetTimelapse(timelapse: Number) void
            + GetLifetime() Number
            + SetLifetime(lifetime: Number) void

            + AutoRoad() Number

            + GetAllConnectedStations() Station[]
            + GetAllConnectedVerses() Verse[]
            + GetConnectedStation(thread: Number) Station
            + GetConnectedVerse(thread: Number) Verse

            + GetAllParents() Station[]
            + GetParent(thread: Number) Station

            + ConnectStation(thread: Number, station: Station) void
            + ConnectVerse(thread: Number, verse: Verse) void
            + DisconnectStation(thread: Number, station: Station) void
            + PushStation(stationToConnect: Station) void
        }

        class RootStation:::concrete { }
        class LeafStation:::concrete { }

    }

    Station -- STATION_TYPE
    Station <|-- RootStation
    Station <|-- LeafStation
    Verse "*" --o "1" Station
    Station "*" --o "*" Station

    namespace Units {

        class DataUnit:::concrete {
            + id: Number
            + path: String
            + type: MEDIA_TYPE
        }

        class Verse:::concrete {
            - length: Number
            + tracks: Track[]

            + CreateTrack() Track
            + RemoveTrack(idx: Number) void
            + CalculateLength() Number
            + GetLength() Number
        }

        class Track:::concrete {
            - mediaType: MEDIA_TYPE
            - clips: Map<Number, Clip>
            + length: Number

            - SortClips() void
            + CalculateLength() Number
            + AddClip(position: Number, clip: Clip) void
            + RemoveClip(position: Number) void
        }

        class Clip:::abstract {
            + mediapath: String
        }

        class VideoClip:::concrete {
            + start: Number
            + end: Number
        }

    }

    Track "*" --o "1" Verse
    VideoClip --|> Clip
    DataUnit "1" --o "1" DEI
    DataUnit "1" --o "1" DEO
    DEI "*" --o "*" Verse
    DEO "*" --o "*" Verse
    Track -- MEDIA_TYPE

    namespace Serializers {

        class StationSerializer:::abstract {
            - SerializeBase()
            - DeserializeBase(type: STATION_TYPE)

            # station: Station
            # out: ostream
            # in: istream

            # SerializeBody() = 0
            # DeserializeBody() = 0

            + StationSerializer(out: ostream, in: istream)

            + Serialize() void
            + Deserialize(type: STATION_TYPE) Station
        }

        class NobodySerializer:::concrete {
            + NobodySerializer(out: ostream, in: istream)

            # SerializeBody() void
            # DeserializeBody(type: STATION_TYPE) Station
        }

        class VerseSerializer:::concrete {
            - out: ostream
            
            + VerseSerializer(out: ostream)
            + Serialize(verse: Verse, mode: bool) void
        }

        class StationNetworkSerializer:::concrete {
            - app : Application
            - network: StationNetwork
            - out: ostream
            - in: istream

            - stations_positions: Queue~streampos~
            - videos_positions: Queue~streampos~

            - firstvideo: streampos

            - SerializeNetwork(out: ostream, fileMode: bool) void
            - DeserializeNetwork() void

            - RecursiveSerialize(out: ostream, root: Station) void
            - RecursiveDeserialize() Station

            + StationNetworkSerializer(app: Application)

            + ExportSpiFile(filepath: String) void
            + ImportSpiFile(filepath: String) void
            + ExportSpiBuffer() unint8[]
        }

    }

    StationSerializer <|-- NobodySerializer
    StationNetworkSerializer "1" --o "1" Network
    StationNetworkSerializer "1" --o "1" Application
    StationNetworkSerializer --> Station
    StationNetworkSerializer --> StationSerializer
    StationSerializer "*" --o "1" Station
    VerseSerializer --> Verse

    namespace Mappers {
        class EngineStateMapper:::static {
            + CreateEngineState(state: EngineState) EngineBaseState
        }

        class StationTypeMapper:::static {
            + CreateStationType(type: STATION_TYPE) Station
        }

        class StationSerialzerMapper:::static {
            + CreateStationSerializer(type: STATION_TYPE, out: ostream, in: istream) StationSerializer
        }

        class SchemaGenerator:::static {
            + GenerateSchema(station: Station) StationChannelSchema
        }

        class ExtensionMediaTypeMapper:::static {
            + GetMediaTypeByExtension(extension: string) MEDIA_TYPE
        }
    }

    EngineStateMapper -- EngineBaseState
    StationTypeMapper -- Station
    StationSerialzerMapper -- StationSerializer
    SchemaGenerator -- StationChannelSchema
    ExtensionMediaTypeMapper -- MEDIA_TYPE

    class Application:::concrete {

        - playing: Boolean

        + OnUpdate(delta: Number) void
        + Travel(thread: Number) void
        + Rewind() void
        + Serialize() void
        + Deserialize(filepath: String) void
    }

    Application "1" *-- "1" StationManager
    Application "1" *-- "1" TimeService
    Application "1" *-- "1" MediaBinder
    Application "1" *-- "1" StationChannel
    Application "1" *-- "1" StationCallEvent
    Application "1" *-- "1" EngineBaseState
    Application -- EngineStateMapper
    Application -- EngineState
    
    
    %% Style Definitions
    classDef abstract fill:#6a0dad,stroke:#a78bfa,stroke-width:2px,color:#ffffff,font-style:italic;
    classDef concrete fill:#1e40af,stroke:#89b4fa,stroke-width:2px,color:#ffffff;
    classDef enumeration fill:#f59e0b,stroke:#fbbf24,stroke-width:2px,color:#ffffff;
    classDef static fill:#059669,stroke:#bbf7d0,stroke-width:2px,color:#ffffff;

from enum import Enum

class Engine:
    def __init__(self) -> None: ...
    def get_station_network(self) -> 'StationNetwork': ...
    def get_media_binder(self) -> 'MediaBinder': ...
    def get_current_time(self) -> float: ...
    def travel(self, thread: str) -> None: ...
    def play(self) -> None: ...
    def pause(self) -> None: ...
    def rewind(self) -> None: ...


class StationNetworkSerializer:
    def __init__(self, engine: Engine) -> None: ...
    def import_spi_file(self, file_path: str) -> None: ...

class STATION_TYPE(Enum):
    ROOT = 0
    MCQ = 1
    HISTORY = 2
    LEAF = 255

class MEDIA_TYPE(Enum):
    VIDEO = 0
    AUDIO = 1
    IMAGE = 2
    TEXT = 3
    UNKNOWN = 255

class Clip:
    media_type: str
    media_path: MEDIA_TYPE
    def __bool__(self) -> bool: ...
    def to_dict(self) -> dict[str, any]: ...

class VideoClip(Clip):
    start: float
    end: float
    def __init__(self, media_path: str, start: float, end: float) -> None: ...

class Track:
    def __init__(self) -> None: ...
    def get_clip(self, position: int) -> Clip: ...
    def get_clip_count(self) -> int: ...

class Verse:
    def __init__(self) -> None: ...
    def get_id(self) -> int: ...
    tracks: list['Track']

class Station:
    def get_id(self) -> int: ...
    def get_type(self) -> STATION_TYPE: ...
    def get_all_connected_stations(self) -> list['Station']: ...
    def get_connected_station(self, thread: int) -> 'Station': ...
    def get_connected_verse(self, thread: int) -> 'Verse': ...
    def get_all_connected_verses(self) -> list[Verse]: ...


class StationNetwork:
    def __init__(self) -> None: ...
    def size(self) -> int: ...
    def get_station_by_id(self, station_id: str) -> 'Station': ...

class MediaBinder:
    def __init__(self) -> None: ...
    def bind_verse(self, verse: str) -> None: ...
    def unbind_verse(self) -> None: ...
    def get_verse(self) -> 'Verse': ...
    def data_to_bind(self, time: float) -> list[Clip]: ...